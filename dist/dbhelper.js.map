{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","_this","this","fetch","DATABASE_URL","then","response","json","restaurants","saveRestaurants","catch","err","error","status","console","localforage","setItem","getItem","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","indexOf","uniqueCuisines","cuisines","photograph","uniqueNeighborhoods","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"iYAAMA,4HAWJC,GAAA,IAAAC,EAAAC,KAKEC,MAAMJ,EAASK,cAAcC,KAAK,SAAAC,GAC9B,OAAOA,EAASC,SACjBF,KAAK,SAAAG,GACNP,EAAKQ,gBAAgBD,GAJSR,EAAA,KAAAQ,KAM7BE,MAAM,SAAAC,GAJL,OADJR,QAAMJ,IAAAA,+BAA4BY,EAAA,iCACvBL,EAAAA,iBACRD,KAAK,SAAAC,GACN,OAAKG,EAAAA,KAAgBD,KACrBR,MAAS,SAAAW,GACRD,IAAME,EAAAA,sCAAOD,EAAAE,OACdC,EAAAF,EAAY,kDAMRJ,GACDO,YANDC,QAAA,cAAAR,4CAeJ,OAAOO,YAAYE,QAAQ,2DAMFC,EAAIlB,GAL9BD,EAAAoB,iBAAA,SAAAP,EAAAJ,GAQG,GAAII,EANRZ,EAAAY,EAAA,UAQW,CACL,IAAMQ,EAAaZ,EAAYa,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC7CE,EACFpB,EAAS,KAAMoB,GAEfpB,EAAS,4BAVcA,0DAOTuB,EAAAvB,GACdA,EAAAA,iBAAeoB,SAAAA,EAAfZ,GACD,GAAAI,EAAQZ,EAAAY,EAAA,UACPZ,CAEH,IAAAwB,EAAAhB,EAAAiB,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,IAVHvB,EAAA,KAAAwB,4DAiCmCG,EAAc3B,GAfjDD,EAAAoB,iBAAA,SAAAP,EAAAJ,GACAT,GAAAA,EACEC,EAAAY,EAAW,UACTZ,CAEA,IAAAwB,EAAAhB,EAAAiB,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,IACA3B,EAAMwB,KAAAA,sEAMZD,EAAAI,EAAA3B,GAqBED,EAASoB,iBAAiB,SAACP,EAAOJ,GAChC,GAAII,EACFZ,EAASY,EAAO,UACX,CACL,IAAIY,EAAUhB,EArBlB,OAAAe,IACAxB,EAASoB,EAAAA,OAAiB,SAAAG,GAAA,OAAAA,EAACV,cAAOJ,KAEd,OAAhBR,IADFwB,EAEOA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,KAEL3B,EAAMwB,KAAAA,iDAMZxB,GA0BED,EAASoB,iBAAiB,SAACP,EAAOJ,GAChC,GAAII,EACFZ,EAASY,EAAO,UACX,CAzBT,IAAAgB,EAAApB,EAAAqB,IAAA,SAAAC,EAAAC,GAAA,OAAAvB,EAAAuB,GAAAJ,eAEMf,EAAOgB,EAAAH,OAAA,SAAAK,EAAAC,GAAA,OAAAH,EAAAI,QAAAF,IAAAC,IACT/B,EAAAA,KAASY,4CAKRZ,GAC4BD,EAAAoB,iBAAA,SAAAP,EAAAJ,GAC3BgB,GAAAA,EAAyBxB,EAAAY,EAAOe,UAAtB,CAEZ3B,IAAAA,EAAewB,EAAfK,IAAA,SAAAC,EAAAC,GAAA,OAAAvB,EAAAuB,GAAAL,eAXJO,EAAAC,EAAAT,OAAA,SAAAK,EAAAC,GAAA,OAAAG,EAAAF,QAAAF,IAAAC,IAcD/B,EAAA,KAAAiC,+CAyCuBb,GAnCtB,MAAA,wBAAAA,EAAAF,iDAM0BV,GAAgB,MAAUA,MAAVY,EAAAF,GAAA,oBAAtCE,EAAAe,WAAA,MAAsC,OAEtC,mBAAMC,EAAsBR,WAA5B,sDA6CwBR,EAAYS,GAnCxC,OAJF,IAAAQ,OAAAC,KAAAC,OAAA,CAyCIC,SAAUpB,EAAWqB,OACrBC,MAAOtB,EAAWuB,KAClBC,IAAK7C,EAAS8C,iBAAiBzB,GAC/BS,IAAKA,EACLiB,UAAWT,OAAOC,KAAKS,UAAUC,4CAxKnC,MAAA","file":"dbhelper.js","sourcesContent":["class DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL).then(response => {\r\n        return response.json();\r\n    }).then(restaurants => {\r\n      this.saveRestaurants(restaurants);\r\n      callback(null, restaurants);\r\n    }).catch(err => {\r\n      console.log('Failed to connect to server,', err, ', data will be served from DB');\r\n        return this.getRestaurants()\r\n        .then(response => {\r\n          return callback(null, response);\r\n        }).catch(err => {\r\n          const error = (`Request failed. Returned status of ${err.status}`);\r\n          callback(error, null);\r\n        })\r\n    });\r\n  }\r\n\r\n  static saveRestaurants(restaurants) {\r\n    localforage.setItem('restaurants', restaurants)\r\n  }\r\n\r\n  static getRestaurants() {\r\n    return localforage.getItem('restaurants')\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    if(restaurant.id == '10'){\r\n      return (`/img/compressed/${restaurant.photograph = '10'}.jpg`);\r\n    } else {\r\n      return (`/img/compressed/${restaurant.photograph}.jpg`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}"]}